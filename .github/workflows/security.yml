name: Security

on:
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'
        cache: true
        cache-dependency-path: bootstrap/go.sum
    
    - name: Install pnpm
      run: npm install -g pnpm
    
    - name: Install dependencies
      run: |
        pnpm install
        cd agent && pip install .[dev]
        cd ../executor && pip install .[dev]
    
    - name: Run pnpm audit
      run: |
        cd companion
        pnpm audit --audit-level=moderate
    
    - name: Run pip audit
      run: |
        cd agent
        pip install pip-audit
        pip-audit --skip-editable --local
        cd ../executor
        pip-audit --skip-editable --local
    
    - name: Run go mod audit
      run: |
        cd bootstrap
        go list -json -deps ./... | nancy sleuth
    
    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  secret-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified

  license-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install pnpm
      run: npm install -g pnpm
    
    - name: Install dependencies
      run: |
        pnpm install
        cd agent && pip install .[dev]
        cd ../executor && pip install .[dev]
    
    - name: Check Node.js licenses
      run: |
        cd companion
        npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;Unlicense'
    
    - name: Check Python licenses
      run: |
        cd agent
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
        # Check for problematic licenses
        python -c "
        import json
        with open('licenses.json') as f:
            licenses = json.load(f)
        for pkg in licenses:
            if pkg['License'] in ['GPL', 'AGPL', 'LGPL']:
                print(f'Warning: {pkg[\"Name\"]} uses {pkg[\"License\"]} license')
                exit(1)
        "
        cd ../executor
        pip install pip-licenses
        pip-licenses --format=json --output-file=licenses.json
        python -c "
        import json
        with open('licenses.json') as f:
            licenses = json.load(f)
        for pkg in licenses:
            if pkg['License'] in ['GPL', 'AGPL', 'LGPL']:
                print(f'Warning: {pkg[\"Name\"]} uses {pkg[\"License\"]} license')
                exit(1)
        "

  container-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker images
      run: |
        echo "Building companion image..."
        docker build -f companion/Dockerfile -t ezra/companion:test . || exit 1
        echo "Building agent image..."
        docker build -f agent/Dockerfile -t ezra/agent:test . || exit 1
        echo "Docker images built successfully"
        docker images | grep ezra
    
    - name: Scan companion image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ezra/companion:test'
        format: 'sarif'
        output: 'companion-trivy-results.sarif'
      continue-on-error: true
    
    - name: Scan agent image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ezra/agent:test'
        format: 'sarif'
        output: 'agent-trivy-results.sarif'
      continue-on-error: true
    
    - name: Verify Trivy output files
      run: |
        ls -la companion-trivy-results.sarif agent-trivy-results.sarif || echo "SARIF files not found"
    
    - name: Upload Trivy scan results
      run: |
        # Only upload SARIF files that exist
        if [ -f "companion-trivy-results.sarif" ] && [ -f "agent-trivy-results.sarif" ]; then
          echo "Uploading both SARIF files"
          # This would use the upload action, but for now just echo
          echo "Both SARIF files found and ready for upload"
        elif [ -f "companion-trivy-results.sarif" ]; then
          echo "Only companion SARIF file found"
        elif [ -f "agent-trivy-results.sarif" ]; then
          echo "Only agent SARIF file found"
        else
          echo "No SARIF files found - skipping upload"
        fi
      continue-on-error: true
