"""Command-line interface for Ezra agent."""

import sys
from pathlib import Path

import typer
from rich.console import Console
from rich.panel import Panel
from rich.prompt import Confirm, Prompt
from rich.table import Table

from .companion_client import CompanionClient
from .config import ConfigManager
from .device import DeviceScanner

# Default options to avoid B008 errors
_CONFIG_OPTION = typer.Option(
    None, "--config", "-c", help="Configuration file path",
)

app = typer.Typer(help="Ezra Control CLI - Manage your Ezra agent")
console = Console()


def _print_section(title: str) -> None:
    """Print a section header."""
    console.print("\n[bold]‚îÄ" * 60 + "[/bold]")
    console.print(f"[bold cyan]{title}[/bold cyan]")
    console.print("[bold]‚îÄ" * 60 + "[/bold]")


def _test_companion_connection(companion_url: str) -> bool:
    """Test connection to companion server. Returns True if successful."""
    console.print(f"\nüîç Testing connection to {companion_url}...")

    class TempConfig:
        companion_url = companion_url
        timeout = 10000
        max_retries = 3

    try:
        client = CompanionClient(TempConfig())  # type: ignore[arg-type]
        if client.health_check():
            console.print("[green]‚úÖ Connection successful![/green]")
            return True
        console.print(
            "[yellow]‚ö†Ô∏è  Could not connect to companion server.[/yellow]",
        )
        return Confirm.ask("Continue anyway?", default=False)
    except (ConnectionError, TimeoutError, OSError) as e:
        console.print(f"[yellow]‚ö†Ô∏è  Connection test failed: {e}[/yellow]")
        return Confirm.ask("Continue anyway?", default=False)


def _get_companion_config() -> str:
    """Prompt for companion server configuration."""
    _print_section("Companion Server Configuration")
    console.print("\nExamples:")
    console.print("  ‚Ä¢ Local development: http://localhost:3000")
    console.print("  ‚Ä¢ Production: https://companion.example.com:8443")
    console.print("  ‚Ä¢ Self-hosted: https://192.168.1.100:8443\n")
    return Prompt.ask("Companion server URL", default="http://localhost:3000")


def _get_policy_config() -> str:
    """Prompt for policy verification configuration."""
    _print_section("Policy Verification")
    console.print("\nPath to the Ed25519 public key for verifying action plans.")
    console.print("This should match the private key used by the companion server.\n")
    return Prompt.ask("Public key path", default="/etc/ezra/policy_pub.key")


def _get_enrollment_config() -> str:
    """Prompt for device enrollment configuration."""
    _print_section("Device Enrollment (Optional)")
    console.print("\nLeave empty if not using enrollment tokens.\n")
    return Prompt.ask("Enrollment token", default="")


def _get_additional_config() -> dict:
    """Prompt for additional configuration options."""
    _print_section("Additional Configuration")
    return {
        "device_id": Prompt.ask("\nDevice ID", default="ezra_device_001"),
        "data_dir": Prompt.ask(
            "Data directory",
            default=str(Path.home() / ".ezra" / "data"),
        ),
        "cache_dir": Prompt.ask(
            "Cache directory",
            default=str(Path.home() / ".ezra" / "cache"),
        ),
        "backup_dir": Prompt.ask(
            "Backup directory",
            default=str(Path.home() / ".ezra" / "backups"),
        ),
        "log_level": Prompt.ask(
            "Log level",
            choices=["debug", "info", "warning", "error"],
            default="info",
        ),
    }


def _create_env_file(
    env_path: Path,
    companion_url: str,
    policy_pub_key_path: str,
    enrollment_token: str,
    config: dict,
) -> None:
    """Create the .env file with provided configuration."""
    env_content = f"""# Ezra Device Agent - Environment Configuration
# Generated by setup wizard
# NEVER commit this file to version control!

# ============================================================
# Companion Server Configuration
# ============================================================
COMPANION_BASE_URL={companion_url}

# ============================================================
# Policy Verification
# ============================================================
POLICY_PUB_KEY_PATH={policy_pub_key_path}

# ============================================================
# Device Enrollment
# ============================================================
DEVICE_ENROLLMENT_TOKEN={enrollment_token}

# ============================================================
# Device Configuration
# ============================================================
DEVICE_ID={config['device_id']}
DATA_DIR={config['data_dir']}
CACHE_DIR={config['cache_dir']}
BACKUP_DIR={config['backup_dir']}
LOG_LEVEL={config['log_level']}

# ============================================================
# Security Settings
# ============================================================
VERIFY_SSL=true
REQUEST_TIMEOUT=30
MAX_RETRIES=3
"""
    env_path.write_text(env_content)
    env_path.chmod(0o600)


def _print_next_steps(policy_pub_key_path: str) -> None:
    """Print next steps after setup completion."""
    _print_section("Next Steps")
    console.print("\n1. Ensure you have the public key file:")
    console.print(f"   {policy_pub_key_path}")
    console.print("\n2. Test the connection:")
    console.print("   ezractl test")
    console.print("\n3. Scan device information:")
    console.print("   ezractl scan")
    console.print("\n4. Start the agent:")
    console.print("   ezra-agent start")
    console.print("\n5. Or install as system service:")
    console.print("   ezractl install --service\n")


@app.command()
def setup():
    """Interactive setup wizard for Ezra agent."""
    console.print(Panel.fit(
        "[bold cyan]Ezra Device Agent - Setup Wizard[/bold cyan]",
        border_style="cyan",
    ))
    console.print()
    console.print("This wizard will help you configure the Ezra Device Agent.")
    console.print("You will need the URL of your companion server.\n")

    # Get agent directory
    agent_dir = Path.home() / ".ezra"
    env_path = agent_dir / ".env"

    # Check if .env already exists
    if env_path.exists() and not Confirm.ask(
        f"\n‚ö†Ô∏è  Configuration already exists at {env_path}. Overwrite?",
        default=False,
    ):
        console.print("\n[yellow]Setup cancelled.[/yellow]")
        return

    # Gather configuration
    companion_url = _get_companion_config()

    if not _test_companion_connection(companion_url):
        console.print("\n[yellow]Setup cancelled.[/yellow]")
        return

    policy_pub_key_path = _get_policy_config()
    enrollment_token = _get_enrollment_config()
    additional_config = _get_additional_config()

    # Save configuration
    _print_section("Saving Configuration")
    agent_dir.mkdir(parents=True, exist_ok=True)

    _create_env_file(
        env_path,
        companion_url,
        policy_pub_key_path,
        enrollment_token,
        additional_config,
    )

    console.print(f"\n[green]‚úÖ Configuration saved to: {env_path}[/green]")
    console.print(
        "[green]üîí File permissions set to 600 (owner read/write only)[/green]",
    )

    # Create data directories
    Path(additional_config["data_dir"]).mkdir(parents=True, exist_ok=True)
    Path(additional_config["cache_dir"]).mkdir(parents=True, exist_ok=True)
    Path(additional_config["backup_dir"]).mkdir(parents=True, exist_ok=True)

    console.print("\n[green]‚úÖ Created data directories[/green]")

    # Print next steps
    _print_next_steps(policy_pub_key_path)


@app.command()
def init(
    companion_url: str = typer.Option(
        "http://localhost:3000", "--companion-url", help="Companion server URL",
    ),
    device_id: str | None = typer.Option(
        None, "--device-id", help="Device identifier",
    ),
    config_file: Path | None = _CONFIG_OPTION,
):
    """Initialize agent configuration."""
    config_manager = ConfigManager(config_file)

    # Create default config
    config = config_manager.create_default_config()
    config.companion_url = companion_url

    if device_id:
        config.device_id = device_id

    # Save configuration
    config_manager.config = config
    config_manager.save()

    console.print(f"‚úÖ Configuration initialized at {config_manager.config_path}")
    console.print(f"üì° Companion URL: {config.companion_url}")
    console.print(f"üÜî Device ID: {config.device_id}")


@app.command()
def config(
    config_file: Path | None = _CONFIG_OPTION,
):
    """Show current configuration."""
    config_manager = ConfigManager(config_file)
    config = config_manager.load()

    table = Table(title="Agent Configuration")
    table.add_column("Setting", style="cyan")
    table.add_column("Value", style="green")

    table.add_row("Companion URL", config.companion_url)
    table.add_row("Device ID", config.device_id)
    table.add_row("Polling Interval", f"{config.polling_interval}ms")
    table.add_row("Max Retries", str(config.max_retries))
    table.add_row("Timeout", f"{config.timeout}ms")
    table.add_row("Log Level", config.log_level)
    table.add_row("Data Directory", str(config.data_dir))
    table.add_row("Cache Directory", str(config.cache_dir))
    table.add_row("Backup Directory", str(config.backup_dir))

    console.print(table)


@app.command()
def scan(
    config_file: Path | None = _CONFIG_OPTION,
):
    """Scan device information."""
    config_manager = ConfigManager(config_file)
    config = config_manager.load()

    scanner = DeviceScanner()
    device_info = scanner.scan(config.device_id)

    # Display device information
    console.print(Panel.fit("[bold]Device Information[/bold]\n", style="blue"))

    table = Table(title="Device Details")
    table.add_column("Property", style="cyan")
    table.add_column("Value", style="green")

    table.add_row("ID", device_info.id)
    table.add_row("Platform", device_info.platform)
    table.add_row("OS", f"{device_info.os} {device_info.version}")
    table.add_row("Architecture", device_info.architecture)
    table.add_row("CPU", device_info.hardware.cpu)
    table.add_row("Memory", f"{device_info.hardware.memory // (1024**3)} GB")
    table.add_row("Storage", f"{device_info.hardware.storage // (1024**3)} GB")
    if device_info.hardware.gpu:
        table.add_row("GPU", device_info.hardware.gpu)

    console.print(table)

    # Display capabilities
    if device_info.capabilities:
        console.print("\n[bold]Capabilities:[/bold]")
        for capability in device_info.capabilities:
            console.print(f"  ‚Ä¢ {capability}")


@app.command()
def test(
    config_file: Path | None = None,
):
    """Test connection to companion server."""
    config_manager = ConfigManager(config_file)
    config = config_manager.load()

    client = CompanionClient(config)

    console.print("üîç Testing companion server connection...")

    # Health check
    if client.health_check():
        console.print("‚úÖ Companion server is healthy")
    else:
        console.print("‚ùå Companion server is not available")
        return

    # Get providers status
    providers = client.get_providers_status()
    if providers:
        console.print("\nüì° LLM Providers:")
        for provider in providers.get("providers", []):
            status = "‚úÖ" if provider.get("available") else "‚ùå"
            console.print(f"  {status} {provider.get('name')}")

    # Get public key
    public_key = client.get_public_key()
    if public_key:
        console.print(f"\nüîë Public Key: {public_key[:32]}...")


@app.command()
def install(
    service: bool = typer.Option(False, "--service", help="Install as system service"),
):
    """Install agent as system service."""
    if not service:
        console.print("Use --service flag to install as system service")
        return

    # This would be implemented based on the platform
    console.print("üîß Installing agent as system service...")

    if sys.platform == "linux":
        # Create systemd service file
        service_content = f"""[Unit]
Description=Ezra Agent
After=network.target

[Service]
Type=simple
User=ezra
WorkingDirectory={Path.home() / '.ezra'}
ExecStart=/usr/local/bin/ezra-agent start --daemon
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
"""

        service_file = Path("/etc/systemd/system/ezra-agent.service")
        console.print(f"üìù Creating service file: {service_file}")
        console.print("Service content:")
        console.print(service_content)
        # Note: This would require sudo privileges
        console.print("‚ö†Ô∏è  Run with sudo to install system service")

    elif sys.platform == "win32":
        # Create Windows service
        console.print("üìù Creating Windows service...")
        console.print("‚ö†Ô∏è  Windows service installation not yet implemented")

    else:
        console.print("‚ùå Service installation not supported on this platform")


if __name__ == "__main__":
    app()
