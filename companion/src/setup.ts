#!/usr/bin/env node

/**
 * Interactive setup wizard for Ezra Companion Server
 * Prompts for API keys and configuration, validates them, and creates .env file
 */

import * as readline from 'readline';
import * as fs from 'fs';
import * as path from 'path';
import { OpenAI } from 'openai';
import Anthropic from '@anthropic-ai/sdk';
import { GoogleGenerativeAI } from '@google/generative-ai';

interface SetupConfig {
  openaiKey?: string;
  anthropicKey?: string;
  googleKey?: string;
  providerPreference: string;
  signingKeyPath: string;
  port: string;
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(prompt: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(prompt, (answer) => {
      resolve(answer.trim());
    });
  });
}

function questionSecret(prompt: string): Promise<string> {
  return new Promise((resolve) => {
    process.stdout.write(prompt);
    const stdin = process.stdin;
    stdin.setRawMode(true);
    stdin.resume();
    stdin.setEncoding('utf8');

    let password = '';
    stdin.on('data', (char: string) => {
      char = char.toString();

      if (char === '\n' || char === '\r' || char === '\u0004') {
        stdin.setRawMode(false);
        stdin.pause();
        process.stdout.write('\n');
        resolve(password);
      } else if (char === '\u0003') {
        // Ctrl+C
        process.exit(1);
      } else if (char === '\u007f' || char === '\b') {
        // Backspace
        if (password.length > 0) {
          password = password.slice(0, -1);
          process.stdout.write('\b \b');
        }
      } else {
        password += char;
        process.stdout.write('*');
      }
    });
  });
}

async function validateOpenAIKey(apiKey: string): Promise<boolean> {
  if (!apiKey) return false;
  try {
    const openai = new OpenAI({ apiKey });
    await openai.models.list();
    return true;
  } catch (error) {
    return false;
  }
}

async function validateAnthropicKey(apiKey: string): Promise<boolean> {
  if (!apiKey) return false;
  try {
    const anthropic = new Anthropic({ apiKey });
    // Anthropic doesn't have a simple list endpoint, so we'll just check format
    return apiKey.startsWith('sk-ant-');
  } catch (error) {
    return false;
  }
}

async function validateGoogleKey(apiKey: string): Promise<boolean> {
  if (!apiKey) return false;
  try {
    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: 'gemini-pro' });
    // Try to get model info
    await model.generateContent({ contents: [{ role: 'user', parts: [{ text: 'test' }] }] });
    return true;
  } catch (error) {
    return false;
  }
}

function createEnvFile(config: SetupConfig, envPath: string): void {
  const envContent = `# Ezra Companion Server - Environment Configuration
# Generated by setup wizard on ${new Date().toISOString()}
# NEVER commit this file to version control!

# ============================================================
# LLM Provider API Keys
# ============================================================
${config.openaiKey ? `OPENAI_API_KEY=${config.openaiKey}` : '# OPENAI_API_KEY='}
${config.anthropicKey ? `ANTHROPIC_API_KEY=${config.anthropicKey}` : '# ANTHROPIC_API_KEY='}
${config.googleKey ? `GOOGLE_API_KEY=${config.googleKey}` : '# GOOGLE_API_KEY='}

# ============================================================
# Provider Selection
# ============================================================
PROVIDER_PREFERENCE=${config.providerPreference}

# ============================================================
# Cryptographic Signing Configuration
# ============================================================
PLAN_SIGNING_PRIVATE_KEY_PATH=${config.signingKeyPath}
PLAN_SIGNING_KEY_ALGO=ed25519

# ============================================================
# Server Configuration
# ============================================================
PORT=${config.port}
HOST=0.0.0.0
LOG_LEVEL=info

# ============================================================
# Rate Limiting
# ============================================================
RATE_LIMIT_REQUESTS_PER_MINUTE=60
RATE_LIMIT_TOKENS_PER_MINUTE=100000
`;

  fs.writeFileSync(envPath, envContent, { mode: 0o600 });
}

async function setup(): Promise<void> {
  console.log('\n╔═══════════════════════════════════════════════════════════════╗');
  console.log('║          Ezra Companion Server - Setup Wizard                ║');
  console.log('╚═══════════════════════════════════════════════════════════════╝\n');

  console.log('This wizard will help you configure the Ezra Companion Server.');
  console.log('You will need API keys from at least one LLM provider.\n');

  const config: SetupConfig = {
    providerPreference: 'auto',
    signingKeyPath: '/run/ezra/policy_priv.key',
    port: '3000',
  };

  let hasAtLeastOneProvider = false;

  // OpenAI Configuration
  console.log('\n─────────────────────────────────────────────────────────────');
  console.log('OpenAI Configuration');
  console.log('Get your API key from: https://platform.openai.com/api-keys');
  console.log('─────────────────────────────────────────────────────────────');

  const configureOpenAI = await question('Configure OpenAI? (Y/n): ');
  if (configureOpenAI.toLowerCase() !== 'n') {
    const openaiKey = await questionSecret('Enter your OpenAI API Key (hidden): ');

    if (openaiKey) {
      process.stdout.write('Validating OpenAI API key... ');
      const isValid = await validateOpenAIKey(openaiKey);

      if (isValid) {
        console.log('✅ Valid');
        config.openaiKey = openaiKey;
        hasAtLeastOneProvider = true;
      } else {
        console.log('❌ Invalid or connection failed');
        const useAnyway = await question('Use this key anyway? (y/N): ');
        if (useAnyway.toLowerCase() === 'y') {
          config.openaiKey = openaiKey;
          hasAtLeastOneProvider = true;
        }
      }
    }
  }

  // Anthropic Configuration
  console.log('\n─────────────────────────────────────────────────────────────');
  console.log('Anthropic Configuration');
  console.log('Get your API key from: https://console.anthropic.com/settings/keys');
  console.log('─────────────────────────────────────────────────────────────');

  const configureAnthropic = await question('Configure Anthropic? (Y/n): ');
  if (configureAnthropic.toLowerCase() !== 'n') {
    const anthropicKey = await questionSecret('Enter your Anthropic API Key (hidden): ');

    if (anthropicKey) {
      process.stdout.write('Validating Anthropic API key... ');
      const isValid = await validateAnthropicKey(anthropicKey);

      if (isValid) {
        console.log('✅ Valid format');
        config.anthropicKey = anthropicKey;
        hasAtLeastOneProvider = true;
      } else {
        console.log('❌ Invalid format');
        const useAnyway = await question('Use this key anyway? (y/N): ');
        if (useAnyway.toLowerCase() === 'y') {
          config.anthropicKey = anthropicKey;
          hasAtLeastOneProvider = true;
        }
      }
    }
  }

  // Google Configuration
  console.log('\n─────────────────────────────────────────────────────────────');
  console.log('Google AI Configuration');
  console.log('Get your API key from: https://makersuite.google.com/app/apikey');
  console.log('─────────────────────────────────────────────────────────────');

  const configureGoogle = await question('Configure Google AI? (Y/n): ');
  if (configureGoogle.toLowerCase() !== 'n') {
    const googleKey = await questionSecret('Enter your Google API Key (hidden): ');

    if (googleKey) {
      process.stdout.write('Validating Google API key... ');
      const isValid = await validateGoogleKey(googleKey);

      if (isValid) {
        console.log('✅ Valid');
        config.googleKey = googleKey;
        hasAtLeastOneProvider = true;
      } else {
        console.log('❌ Invalid or connection failed');
        const useAnyway = await question('Use this key anyway? (y/N): ');
        if (useAnyway.toLowerCase() === 'y') {
          config.googleKey = googleKey;
          hasAtLeastOneProvider = true;
        }
      }
    }
  }

  if (!hasAtLeastOneProvider) {
    console.log('\n❌ Error: You must configure at least one LLM provider.');
    rl.close();
    process.exit(1);
  }

  // Provider Preference
  console.log('\n─────────────────────────────────────────────────────────────');
  console.log('Provider Preference');
  console.log('─────────────────────────────────────────────────────────────');

  const providers = ['auto'];
  if (config.openaiKey) providers.push('openai');
  if (config.anthropicKey) providers.push('anthropic');
  if (config.googleKey) providers.push('gemini');

  console.log(`Available: ${providers.join(', ')}`);
  const preference = await question(`Provider preference (default: auto): `);
  if (preference && providers.includes(preference.toLowerCase())) {
    config.providerPreference = preference.toLowerCase();
  }

  // Signing Key Path
  console.log('\n─────────────────────────────────────────────────────────────');
  console.log('Cryptographic Signing');
  console.log('─────────────────────────────────────────────────────────────');

  const keyPath = await question(
    `Ed25519 private key path (default: ${config.signingKeyPath}): `,
  );
  if (keyPath) {
    config.signingKeyPath = keyPath;
  }

  // Server Port
  console.log('\n─────────────────────────────────────────────────────────────');
  console.log('Server Configuration');
  console.log('─────────────────────────────────────────────────────────────');

  const port = await question(`Server port (default: ${config.port}): `);
  if (port && !isNaN(parseInt(port))) {
    config.port = port;
  }

  // Create .env file
  console.log('\n─────────────────────────────────────────────────────────────');
  console.log('Saving Configuration');
  console.log('─────────────────────────────────────────────────────────────');

  const envPath = path.join(__dirname, '../.env');

  if (fs.existsSync(envPath)) {
    const overwrite = await question(
      '\n⚠️  .env file already exists. Overwrite? (y/N): ',
    );
    if (overwrite.toLowerCase() !== 'y') {
      console.log('\n❌ Setup cancelled.');
      rl.close();
      process.exit(0);
    }
  }

  createEnvFile(config, envPath);

  console.log(`\n✅ Configuration saved to: ${envPath}`);
  console.log('🔒 File permissions set to 600 (owner read/write only)');

  console.log('\n─────────────────────────────────────────────────────────────');
  console.log('Next Steps');
  console.log('─────────────────────────────────────────────────────────────');
  console.log('1. Generate Ed25519 signing keys:');
  console.log(`   openssl genpkey -algorithm ed25519 -out ${config.signingKeyPath}`);
  console.log('   openssl pkey -in ${config.signingKeyPath} -pubout -out policy_pub.key\n');
  console.log('2. Build and start the server:');
  console.log('   pnpm build');
  console.log('   pnpm start\n');
  console.log('3. Or run in development mode:');
  console.log('   pnpm dev\n');

  rl.close();
}

setup().catch((error) => {
  console.error('\n❌ Setup failed:', error.message);
  rl.close();
  process.exit(1);
});

